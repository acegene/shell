#!/usr/bin/env bash
#
# Get the commit a branch was based from

set -u

PATH_THIS="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)/"$(basename -- "${BASH_SOURCE[0]}")""
DIR_THIS="$(dirname -- "${PATH_THIS}")"
BASE_THIS="$(basename -- "${PATH_THIS}")"
[ -f "${PATH_THIS}" ] && [ -d "${DIR_THIS}" ] && [ -f "${DIR_THIS}/${BASE_THIS}" ] || ! echo >&2 "ERROR: could not generate paths" || exit 1

__parse_args() {
    while (("${#}")); do
        case "${1}" in
        --commit-src | --commit | -c)
            commit_src="${2}"
            shift
            ;;
        --dir | -d) # select the git directory to execute this script in
            dir_root="${2}"
            [ -d "${dir_root}" ] || ! echo >&2 "ERROR: ${BASE_THIS}: param '${2}' for '${1}' is not a valid dir"
            shift
            ;;
        --base-branch | -b)
            base_branch="${2}"
            [ -d "${base_branch}" ] || ! echo >&2 "ERROR: ${BASE_THIS}: param '${2}' for '${1}' is not a valid dir"
            shift
            ;;
        *) echo >&2 "ERROR: ${BASE_THIS}: arg '${1}' is unexpected" && return 1 ;;
        esac
        shift
    done
}

__check_and_clean_args() {
    branch_base="${branch_base:-$(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f3-)}"
    git cat-file -e "${branch_base}" 2>/dev/null || ! echo >&2 "ERROR: ${BASE_THIS}: could not find git ref for '${branch_base}'" || return 1
    git cat-file -e "${commit_src}" 2>/dev/null || ! echo >&2 "ERROR: ${BASE_THIS}: could not find git ref for '${commit_src}'" || return 1
}

_git_source() {
    #### default vars
    local dir_root="${PWD}"
    local branch_base=''
    local commit_src='HEAD'
    #### parse script args and overwrite vars
    __parse_args "${@}" || return "${?}"
    #### check and clean args
    __check_and_clean_args || return "${?}"
    #### get commit branch started with
    local base_commit="$(diff -u <(git -C "${dir_root}" rev-list --first-parent "${commit_src}") <(git -C "${dir_root}" rev-list --first-parent "${branch_base}") | sed -ne 's/^ //p' | head -1)"
    git cat-file -e "${base_commit}" || ! echo >&2 "ERROR: ${BASE_THIS}: could not find base commit, are you on a branch?" || return 1
    echo "${base_commit}"
}

_git_source "${@}" || exit "${?}"
