#!/usr/bin/env bash
#
# Copy the commit message specified and print to stdout
#
# usage
#   * gmsg
#       * get the commit msg for HEAD and copy it to clipboard
#   * gmsg sha_or_branch_or_ref
#       * get the commit msg for sha_or_branch_or_ref and copy it to clipboard

set -u

PATH_THIS="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd -P)/"$(basename -- "${BASH_SOURCE[0]}")""
DIR_THIS="$(dirname -- "${PATH_THIS}")"
BASE_THIS="$(basename -- "${PATH_THIS}")"
[ -f "${PATH_THIS}" ] && [ -d "${DIR_THIS}" ] && [ -f "${DIR_THIS}/${BASE_THIS}" ] || ! echo >&2 "ERROR: could not generate paths" || exit 1

__parse_args() {
    while (("${#}")); do
        case "${1}" in
        --commit-or-ref | --commit | -c)
            git_ref="${2}"
            shift
            ;;
        --dir | -d) # select the git directory to execute this script in
            dir_root="${2}"
            [ -d "${dir_root}" ] || ! echo >&2 "ERROR: ${BASE_THIS}: param '${2}' for '${1}' is not a valid dir"
            shift
            ;;
        *)
            git_ref="${1}"
            echo >&2 "INFO: ${BASE_THIS}: using '${1}' as '--commit' arg"
            ;;
        esac
        shift
    done
}

_gmsg() {
    #### hardcoded vars
    local git_ref='HEAD'
    local dir_root="${PWD}"
    #### parse script args and overwrite vars
    __parse_args "${@}" || return "${?}"
    #### check git refs
    git cat-file -e "${git_ref}" 2>/dev/null || ! echo >&2 "ERROR: ${BASE_THIS}: could not find git ref for '${git_ref}'" || return 1
    #### copy git msg for $git_ref
    if command -v "xsel" >/dev/null 2>&1; then
        git -C "${dir_root}" log "${git_ref}" -1 --pretty=%B | sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba' | sed '$ {/^$/d}' | tee /dev/stderr | xsel --clipboard
    else
        echo >&2 "WARNING: ${BASE_THIS}: could not find copy tool xsel, printing msg instead"
        git -C "${dir_root}" log "${git_ref}" -1 --pretty=%B | sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba' | sed '$ {/^$/d}'
    fi
}

_gmsg "${@}" || exit "${?}"
